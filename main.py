"""
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""
# import argparse
#
# if __name__ == '__main__':
#     parser = argparse.ArgumentParser()
#     parser.add_argument(
#         '-ch', '--count-hours',
#         type=int,
#         required=True,
#         help='Количество часов')
#
#     parser.add_argument(
#         '-hr', '--hourly-rate',
#         type=int,
#         required=True,
#         help='Часовая ставка')
#
#     parser.add_argument(
#         '-p', '--prize',
#         type=int,
#         required=True,
#         help='Премия')
#
#     args = parser.parse_args()
#
#     salary = args.count_hours * args.hourly_rate + args.prize
#     print("Result: " + salary)
print("############")


"""
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

list_input = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
list_result = [list_input[i + 1] for i in range(len(list_input) - 1) if list_input[i] < list_input[i + 1]]
print("Input: " + str(list_input))
print("Result: " + str(list_result))
print("############")

"""
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

print([i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0])
print("############")

"""
Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

list_input = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
list_result = [i for i in list_input if list_input.count(i) == 1]
print(list_input)
print("############")

"""
Реализовать формирование списка, используя функцию range() и возможности генератора.
список должны войти четные числа от 100 до 1000 (включая границы).
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

from functools import reduce

list_input = [i for i in range(100, 1001) if i % 2 == 0]
result = reduce((lambda x, y: x * y), list_input)
print(result)
print("############")

"""
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным.
Необходимо предусмотреть условие его завершения.

Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

from itertools import cycle, count

input_start = int(input('Start number: '))
input_stop = input_start * 2 + 10 + 1

# a
for i in count(input_start):
    if i < input_stop:
        print(i)
    else:
        break
print("############")

# b
my_list = [i for i in range(input_stop)]
count = 0
for b in cycle(my_list):
    if count < input_stop + 10:
        print(b)
        count += 1
    else:
        break
print("############")

"""
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1
"""

from math import factorial


def fact(n: int):
    for i in range(1, n + 1):
        yield factorial(i)

input_value = 4
for el in fact(input_value):
    print(el)

